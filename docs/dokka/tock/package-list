$dokka.format:html
$dokka.linkExtension:html
$dokka.location:ai.tock.bot.connector.teams.messages$equalsTo(com.microsoft.bot.schema.models.CardAction, com.microsoft.bot.schema.models.CardAction)ai.tock.bot.connector.teams.messages/com.microsoft.bot.schema.models.-card-action/equals-to.html
$dokka.location:ai.tock.bot.engine.dialog$setTo(ai.tock.nlp.api.client.model.Entity, ai.tock.nlp.entity.Value)ai.tock.bot.engine.dialog/ai.tock.nlp.api.client.model.-entity/set-to.html
$dokka.location:ai.tock.bot.engine.dialog$setTo(ai.tock.nlp.api.client.model.Entity, kotlin.String)ai.tock.bot.engine.dialog/ai.tock.nlp.api.client.model.-entity/set-to.html
$dokka.location:ai.tock.bot.engine.monitoring$logError(mu.KLogger, kotlin.String, ai.tock.bot.engine.monitoring.RequestTimerData)ai.tock.bot.engine.monitoring/mu.-k-logger/log-error.html
$dokka.location:ai.tock.bot.engine.monitoring$logError(mu.KLogger, kotlin.Throwable, ai.tock.bot.engine.monitoring.RequestTimerData)ai.tock.bot.engine.monitoring/mu.-k-logger/log-error.html
$dokka.location:ai.tock.bot.test$asGenericMessage(ch.tutteli.atrium.creating.AssertionPlant((ai.tock.bot.test.BotBusMockLog)), kotlin.Function1((ch.tutteli.atrium.creating.AssertionPlant((ai.tock.bot.engine.message.GenericMessage)), kotlin.Unit)))ai.tock.bot.test/ch.tutteli.atrium.creating.-assertion-plant/as-generic-message.html
$dokka.location:ai.tock.bot.test$toBeImage(ch.tutteli.atrium.creating.AssertionPlant((ai.tock.bot.engine.message.Attachment)))ai.tock.bot.test/ch.tutteli.atrium.creating.-assertion-plant/to-be-image.html
$dokka.location:ai.tock.bot.test$toBeSimpleTextMessage(ch.tutteli.atrium.creating.AssertionPlant((ai.tock.bot.test.BotBusMockLog)), kotlin.String)ai.tock.bot.test/ch.tutteli.atrium.creating.-assertion-plant/to-be-simple-text-message.html
$dokka.location:ai.tock.bot.test$toHaveAttachment(ch.tutteli.atrium.creating.AssertionPlant((ai.tock.bot.engine.message.GenericElement)), kotlin.Function1((ch.tutteli.atrium.creating.AssertionPlant((ai.tock.bot.engine.message.Attachment)), kotlin.Unit)))ai.tock.bot.test/ch.tutteli.atrium.creating.-assertion-plant/to-have-attachment.html
$dokka.location:ai.tock.bot.test$toHaveChoice(ch.tutteli.atrium.creating.AssertionPlant((ai.tock.bot.engine.message.GenericMessage)), kotlin.String, kotlin.Function1((ch.tutteli.atrium.creating.AssertionPlant((ai.tock.bot.engine.message.Choice)), kotlin.Unit)))ai.tock.bot.test/ch.tutteli.atrium.creating.-assertion-plant/to-have-choice.html
$dokka.location:ai.tock.bot.test$toHaveChoices(ch.tutteli.atrium.creating.AssertionPlant((ai.tock.bot.engine.message.GenericElement)), kotlin.String, kotlin.Array((kotlin.String)))ai.tock.bot.test/ch.tutteli.atrium.creating.-assertion-plant/to-have-choices.html
$dokka.location:ai.tock.bot.test$toHaveElement(ch.tutteli.atrium.creating.AssertionPlant((ai.tock.bot.engine.message.GenericMessage)), kotlin.Int, kotlin.Function1((ch.tutteli.atrium.creating.AssertionPlant((ai.tock.bot.engine.message.GenericElement)), kotlin.Unit)))ai.tock.bot.test/ch.tutteli.atrium.creating.-assertion-plant/to-have-element.html
$dokka.location:ai.tock.bot.test$toHaveExactlyChoices(ch.tutteli.atrium.creating.AssertionPlant((ai.tock.bot.engine.message.GenericElement)), kotlin.String, kotlin.Array((kotlin.String)))ai.tock.bot.test/ch.tutteli.atrium.creating.-assertion-plant/to-have-exactly-choices.html
$dokka.location:ai.tock.bot.test$toHaveExactlyGlobalChoices(ch.tutteli.atrium.creating.AssertionPlant((ai.tock.bot.engine.message.GenericMessage)), kotlin.String, kotlin.Array((kotlin.String)))ai.tock.bot.test/ch.tutteli.atrium.creating.-assertion-plant/to-have-exactly-global-choices.html
$dokka.location:ai.tock.bot.test$toHaveGlobalChoices(ch.tutteli.atrium.creating.AssertionPlant((ai.tock.bot.engine.message.GenericMessage)), kotlin.String, kotlin.Array((kotlin.String)))ai.tock.bot.test/ch.tutteli.atrium.creating.-assertion-plant/to-have-global-choices.html
$dokka.location:ai.tock.bot.test$toHaveGlobalText(ch.tutteli.atrium.creating.AssertionPlant((ai.tock.bot.engine.message.GenericMessage)), kotlin.String, kotlin.String)ai.tock.bot.test/ch.tutteli.atrium.creating.-assertion-plant/to-have-global-text.html
$dokka.location:ai.tock.bot.test$toHaveIntent(ch.tutteli.atrium.creating.AssertionPlant((ai.tock.bot.engine.message.Choice)), kotlin.String)ai.tock.bot.test/ch.tutteli.atrium.creating.-assertion-plant/to-have-intent.html
$dokka.location:ai.tock.bot.test$toHaveNotChoices(ch.tutteli.atrium.creating.AssertionPlant((ai.tock.bot.engine.message.GenericElement)), kotlin.String, kotlin.Array((kotlin.String)))ai.tock.bot.test/ch.tutteli.atrium.creating.-assertion-plant/to-have-not-choices.html
$dokka.location:ai.tock.bot.test$toHaveNotGlobalChoices(ch.tutteli.atrium.creating.AssertionPlant((ai.tock.bot.engine.message.GenericMessage)), kotlin.String, kotlin.Array((kotlin.String)))ai.tock.bot.test/ch.tutteli.atrium.creating.-assertion-plant/to-have-not-global-choices.html
$dokka.location:ai.tock.bot.test$toHaveParameter(ch.tutteli.atrium.creating.AssertionPlant((ai.tock.bot.engine.message.Choice)), ai.tock.bot.definition.ParameterKey, kotlin.String)ai.tock.bot.test/ch.tutteli.atrium.creating.-assertion-plant/to-have-parameter.html
$dokka.location:ai.tock.bot.test$toHaveParameter(ch.tutteli.atrium.creating.AssertionPlant((ai.tock.bot.engine.message.Choice)), kotlin.String, kotlin.String)ai.tock.bot.test/ch.tutteli.atrium.creating.-assertion-plant/to-have-parameter.html
$dokka.location:ai.tock.bot.test$toHaveSubtitle(ch.tutteli.atrium.creating.AssertionPlant((ai.tock.bot.engine.message.GenericElement)), kotlin.String)ai.tock.bot.test/ch.tutteli.atrium.creating.-assertion-plant/to-have-subtitle.html
$dokka.location:ai.tock.bot.test$toHaveText(ch.tutteli.atrium.creating.AssertionPlant((ai.tock.bot.engine.message.GenericElement)), kotlin.String, kotlin.String)ai.tock.bot.test/ch.tutteli.atrium.creating.-assertion-plant/to-have-text.html
$dokka.location:ai.tock.bot.test$toHaveTitle(ch.tutteli.atrium.creating.AssertionPlant((ai.tock.bot.engine.message.Choice)), kotlin.String)ai.tock.bot.test/ch.tutteli.atrium.creating.-assertion-plant/to-have-title.html
$dokka.location:ai.tock.bot.test$toHaveTitle(ch.tutteli.atrium.creating.AssertionPlant((ai.tock.bot.engine.message.GenericElement)), kotlin.String)ai.tock.bot.test/ch.tutteli.atrium.creating.-assertion-plant/to-have-title.html
$dokka.location:ai.tock.bot.test$toHaveUrl(ch.tutteli.atrium.creating.AssertionPlant((ai.tock.bot.engine.message.Attachment)), kotlin.String)ai.tock.bot.test/ch.tutteli.atrium.creating.-assertion-plant/to-have-url.html
$dokka.location:ai.tock.shared$addJacksonConverter(retrofit2.Retrofit.Builder, com.fasterxml.jackson.databind.ObjectMapper)ai.tock.shared/retrofit2.-retrofit.-builder/add-jackson-converter.html
$dokka.location:ai.tock.shared$changeNamespace(kotlin.String, kotlin.String)ai.tock.shared/kotlin.-string/change-namespace.html
$dokka.location:ai.tock.shared$create(retrofit2.Retrofit)ai.tock.shared/retrofit2.-retrofit/create.html
$dokka.location:ai.tock.shared$debug(mu.KLogger, kotlin.Throwable)ai.tock.shared/mu.-k-logger/debug.html
$dokka.location:ai.tock.shared$error(mu.KLogger, kotlin.Throwable)ai.tock.shared/mu.-k-logger/error.html
$dokka.location:ai.tock.shared$info(mu.KLogger, kotlin.Throwable)ai.tock.shared/mu.-k-logger/info.html
$dokka.location:ai.tock.shared$mapNotNullValues(kotlin.collections.Iterable((ai.tock.shared.mapNotNullValues.T)), kotlin.Function1((ai.tock.shared.mapNotNullValues.T, kotlin.Pair((ai.tock.shared.mapNotNullValues.K, ai.tock.shared.mapNotNullValues.V)))))ai.tock.shared/kotlin.collections.-iterable/map-not-null-values.html
$dokka.location:ai.tock.shared$name(kotlin.String)ai.tock.shared/kotlin.-string/name.html
$dokka.location:ai.tock.shared$namespace(kotlin.String)ai.tock.shared/kotlin.-string/namespace.html
$dokka.location:ai.tock.shared$namespaceAndName(kotlin.String)ai.tock.shared/kotlin.-string/namespace-and-name.html
$dokka.location:ai.tock.shared$provide(com.github.salomonbrys.kodein.KodeinInjector, kotlin.Any)ai.tock.shared/com.github.salomonbrys.kodein.-kodein-injector/provide.html
$dokka.location:ai.tock.shared$provideOrDefault(com.github.salomonbrys.kodein.KodeinInjector, kotlin.Any, kotlin.Function0((ai.tock.shared.provideOrDefault.T)))ai.tock.shared/com.github.salomonbrys.kodein.-kodein-injector/provide-or-default.html
$dokka.location:ai.tock.shared$sumByLong(kotlin.collections.Iterable((ai.tock.shared.sumByLong.T)), kotlin.Function1((ai.tock.shared.sumByLong.T, kotlin.Long)))ai.tock.shared/kotlin.collections.-iterable/sum-by-long.html
$dokka.location:ai.tock.shared$toList(kotlin.collections.Iterator((ai.tock.shared.toList.T)))ai.tock.shared/kotlin.collections.-iterator/to-list.html
$dokka.location:ai.tock.shared$toSafeList(kotlin.collections.Iterator((ai.tock.shared.toSafeList.T)))ai.tock.shared/kotlin.collections.-iterator/to-safe-list.html
$dokka.location:ai.tock.shared$toSet(java.util.Enumeration((ai.tock.shared.toSet.T)))ai.tock.shared/java.util.-enumeration/to-set.html
$dokka.location:ai.tock.shared$trace(mu.KLogger, kotlin.Throwable)ai.tock.shared/mu.-k-logger/trace.html
$dokka.location:ai.tock.shared$warn(mu.KLogger, kotlin.Throwable)ai.tock.shared/mu.-k-logger/warn.html
$dokka.location:ai.tock.shared$watch(com.mongodb.reactivestreams.client.MongoCollection((ai.tock.shared.watch.T)), com.mongodb.client.model.changestream.FullDocument, kotlin.Function1((com.mongodb.client.model.changestream.ChangeStreamDocument((ai.tock.shared.watch.T)), kotlin.Unit)))ai.tock.shared/com.mongodb.reactivestreams.client.-mongo-collection/watch.html
$dokka.location:ai.tock.shared$withNamespace(kotlin.String, kotlin.String)ai.tock.shared/kotlin.-string/with-namespace.html
$dokka.location:ai.tock.shared$withoutNamespace(kotlin.String, kotlin.String)ai.tock.shared/kotlin.-string/without-namespace.html
$dokka.location:ai.tock.shared.jackson$addDeserializer(com.fasterxml.jackson.databind.module.SimpleModule, kotlin.reflect.KClass((ai.tock.shared.jackson.addDeserializer.T)), com.fasterxml.jackson.databind.JsonDeserializer((ai.tock.shared.jackson.addDeserializer.T)))ai.tock.shared.jackson/com.fasterxml.jackson.databind.module.-simple-module/add-deserializer.html
$dokka.location:ai.tock.shared.jackson$addSerializer(com.fasterxml.jackson.databind.module.SimpleModule, kotlin.reflect.KClass((ai.tock.shared.jackson.addSerializer.T)), com.fasterxml.jackson.databind.JsonSerializer((ai.tock.shared.jackson.addSerializer.T)))ai.tock.shared.jackson/com.fasterxml.jackson.databind.module.-simple-module/add-serializer.html
$dokka.location:ai.tock.shared.jackson$fieldNameWithValueReady(com.fasterxml.jackson.core.JsonParser)ai.tock.shared.jackson/com.fasterxml.jackson.core.-json-parser/field-name-with-value-ready.html
$dokka.location:ai.tock.shared.jackson$read(com.fasterxml.jackson.core.JsonParser, kotlin.Function2((ai.tock.shared.jackson.read.FIELDS, kotlin.String, kotlin.Unit)))ai.tock.shared.jackson/com.fasterxml.jackson.core.-json-parser/read.html
$dokka.location:ai.tock.shared.jackson$readListValues(com.fasterxml.jackson.core.JsonParser)ai.tock.shared.jackson/com.fasterxml.jackson.core.-json-parser/read-list-values.html
$dokka.location:ai.tock.shared.jackson$readValue(com.fasterxml.jackson.core.JsonParser)ai.tock.shared.jackson/com.fasterxml.jackson.core.-json-parser/read-value.html
$dokka.location:ai.tock.shared.vertx$blocking(io.vertx.core.Vertx, kotlin.Function1((io.vertx.core.Promise((ai.tock.shared.vertx.blocking.T)), kotlin.Unit)), kotlin.Function1((io.vertx.core.AsyncResult((ai.tock.shared.vertx.blocking.T)), kotlin.Unit)))ai.tock.shared.vertx/io.vertx.core.-vertx/blocking.html
$dokka.location:ai.tock.shared.vertx$blocking(io.vertx.ext.web.Route, kotlin.Function1((io.vertx.ext.web.RoutingContext, kotlin.Unit)))ai.tock.shared.vertx/io.vertx.ext.web.-route/blocking.html
ai.tock.bot
ai.tock.bot.admin.answer
ai.tock.bot.admin.bot
ai.tock.bot.admin.dialog
ai.tock.bot.admin.message
ai.tock.bot.admin.story
ai.tock.bot.admin.story.dump
ai.tock.bot.admin.test
ai.tock.bot.admin.user
ai.tock.bot.api.client
ai.tock.bot.api.model
ai.tock.bot.api.model.configuration
ai.tock.bot.api.model.context
ai.tock.bot.api.model.message.bot
ai.tock.bot.api.model.message.user
ai.tock.bot.api.model.websocket
ai.tock.bot.api.webhook
ai.tock.bot.api.websocket
ai.tock.bot.connector
ai.tock.bot.connector.alexa
ai.tock.bot.connector.ga
ai.tock.bot.connector.ga.model
ai.tock.bot.connector.ga.model.notification
ai.tock.bot.connector.ga.model.request
ai.tock.bot.connector.ga.model.request.transaction.v3
ai.tock.bot.connector.ga.model.response
ai.tock.bot.connector.ga.model.response.transaction.v3
ai.tock.bot.connector.media
ai.tock.bot.connector.messenger
ai.tock.bot.connector.messenger.model
ai.tock.bot.connector.messenger.model.attachment
ai.tock.bot.connector.messenger.model.handover
ai.tock.bot.connector.messenger.model.send
ai.tock.bot.connector.messenger.model.webhook
ai.tock.bot.connector.rocketchat
ai.tock.bot.connector.slack
ai.tock.bot.connector.slack.model
ai.tock.bot.connector.slack.model.old
ai.tock.bot.connector.teams
ai.tock.bot.connector.teams.auth
ai.tock.bot.connector.teams.messages
ai.tock.bot.connector.teams.token
ai.tock.bot.connector.twitter
ai.tock.bot.connector.twitter.model
ai.tock.bot.connector.twitter.model.incoming
ai.tock.bot.connector.twitter.model.outcoming
ai.tock.bot.connector.web
ai.tock.bot.connector.web.send
ai.tock.bot.connector.whatsapp
ai.tock.bot.connector.whatsapp.model.common
ai.tock.bot.connector.whatsapp.model.send
ai.tock.bot.connector.whatsapp.model.webhook
ai.tock.bot.definition
ai.tock.bot.engine
ai.tock.bot.engine.action
ai.tock.bot.engine.config
ai.tock.bot.engine.dialog
ai.tock.bot.engine.event
ai.tock.bot.engine.feature
ai.tock.bot.engine.message
ai.tock.bot.engine.message.parser
ai.tock.bot.engine.monitoring
ai.tock.bot.engine.nlp
ai.tock.bot.engine.stt
ai.tock.bot.engine.user
ai.tock.bot.test
ai.tock.bot.test.junit
ai.tock.bot.test.mock
ai.tock.shared
ai.tock.shared.cache
ai.tock.shared.jackson
ai.tock.shared.security
ai.tock.shared.security.auth
ai.tock.shared.security.mongo
ai.tock.shared.vertx
